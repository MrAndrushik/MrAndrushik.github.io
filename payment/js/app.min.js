/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nconst CLASS_NAME_SELECT = \"select\";\r\nconst CLASS_NAME_ACTIVE = \"select_show\";\r\nconst CLASS_NAME_SELECTED = \"select__option_selected\";\r\nconst SELECTOR_ACTIVE = \".select_show\";\r\nconst SELECTOR_DATA = \"[data-select]\";\r\nconst SELECTOR_DATA_TOGGLE = '[data-select=\"toggle\"]';\r\nconst SELECTOR_OPTION_SELECTED = \".select__option_selected\";\r\n\r\nclass CustomSelect {\r\n    constructor(target, params) {\r\n        this._elRoot =\r\n            typeof target === \"string\"\r\n                ? document.querySelector(target)\r\n                : target;\r\n        this._params = params || {};\r\n        if (this._params[\"options\"]) {\r\n            this._elRoot.classList.add(CLASS_NAME_SELECT);\r\n            this._elRoot.innerHTML = CustomSelect.template(this._params);\r\n        }\r\n        this._elToggle = this._elRoot.querySelector(SELECTOR_DATA_TOGGLE);\r\n        this._elRoot.addEventListener(\"click\", this._onClick.bind(this));\r\n    }\r\n    _onClick(e) {\r\n        const target = e.target;\r\n        const type = target.closest(SELECTOR_DATA).dataset.select;\r\n        switch (type) {\r\n            case \"toggle\":\r\n                this.toggle();\r\n                break;\r\n            case \"option\":\r\n                this._changeValue(target);\r\n                break;\r\n        }\r\n    }\r\n    _update(option) {\r\n        option = option.closest(\".select__option\");\r\n        const selected = this._elRoot.querySelector(SELECTOR_OPTION_SELECTED);\r\n        if (selected) {\r\n            selected.classList.remove(CLASS_NAME_SELECTED);\r\n        }\r\n        option.classList.add(CLASS_NAME_SELECTED);\r\n        this._elToggle.textContent = option.textContent;\r\n        this._elToggle.value = option.dataset[\"value\"];\r\n        this._elToggle.dataset.index = option.dataset[\"index\"];\r\n        this._elRoot.dispatchEvent(new CustomEvent(\"select.change\"));\r\n        this._params.onSelected ? this._params.onSelected(this, option) : null;\r\n        return option.dataset[\"value\"];\r\n    }\r\n    _reset() {\r\n        const selected = this._elRoot.querySelector(SELECTOR_OPTION_SELECTED);\r\n        if (selected) {\r\n            selected.classList.remove(CLASS_NAME_SELECTED);\r\n        }\r\n        this._elToggle.textContent = \"Выберите из списка\";\r\n        this._elToggle.value = \"\";\r\n        this._elToggle.dataset.index = -1;\r\n        this._elRoot.dispatchEvent(new CustomEvent(\"select.change\"));\r\n        this._params.onSelected ? this._params.onSelected(this, null) : null;\r\n        return \"\";\r\n    }\r\n    _changeValue(option) {\r\n        if (option.classList.contains(CLASS_NAME_SELECTED)) {\r\n            return;\r\n        }\r\n        this._update(option);\r\n        this.hide();\r\n    }\r\n    show() {\r\n        document.querySelectorAll(SELECTOR_ACTIVE).forEach((select) => {\r\n            select.classList.remove(CLASS_NAME_ACTIVE);\r\n        });\r\n        this._elRoot.classList.add(CLASS_NAME_ACTIVE);\r\n    }\r\n    hide() {\r\n        this._elRoot.classList.remove(CLASS_NAME_ACTIVE);\r\n    }\r\n    toggle() {\r\n        if (this._elRoot.classList.contains(CLASS_NAME_ACTIVE)) {\r\n            this.hide();\r\n        } else {\r\n            this.show();\r\n        }\r\n    }\r\n    dispose() {\r\n        this._elRoot.removeEventListener(\"click\", this._onClick);\r\n    }\r\n    get value() {\r\n        return this._elToggle.value;\r\n    }\r\n    set value(value) {\r\n        let isExists = false;\r\n        this._elRoot.querySelectorAll(\".select__option\").forEach((option) => {\r\n            if (option.dataset[\"value\"] === value) {\r\n                isExists = true;\r\n                return this._update(option);\r\n            }\r\n        });\r\n        if (!isExists) {\r\n            return this._reset();\r\n        }\r\n    }\r\n    get selectedIndex() {\r\n        return this._elToggle.dataset[\"index\"];\r\n    }\r\n    set selectedIndex(index) {\r\n        const option = this._elRoot.querySelector(\r\n            `.select__option[data-index=\"${index}\"]`\r\n        );\r\n        if (option) {\r\n            return this._update(option);\r\n        }\r\n        return this._reset();\r\n    }\r\n}\r\n\r\nCustomSelect.template = (params) => {\r\n    const name = params[\"name\"];\r\n    const options = params[\"options\"];\r\n    const targetValue = params[\"targetValue\"];\r\n    let items = [];\r\n    let selectedIndex = -1;\r\n    let selectedValue = \"\";\r\n    let selectedContent = \"Выберите из списка\";\r\n    options.forEach((option, index) => {\r\n        let selectedClass = \"\";\r\n        if (option[0] === targetValue) {\r\n            selectedClass = \" select__option_selected\";\r\n            selectedIndex = index;\r\n            selectedValue = option[0];\r\n            selectedContent = option[1];\r\n        }\r\n        items.push(\r\n            `<li class=\"select__option${selectedClass}\" data-select=\"option\" data-value=\"${option[0]}\" data-index=\"${index}\">${option[1]}</li>`\r\n        );\r\n    });\r\n    return `<button type=\"button\" class=\"select__toggle\" name=\"${name}\" value=\"${selectedValue}\" data-select=\"toggle\" data-index=\"${selectedIndex}\">${selectedContent}</button>\r\n  <div class=\"select__dropdown\">\r\n    <ul class=\"select__options\">${items.join(\"\")}</ul>\r\n  </div>`;\r\n};\r\n\r\ndocument.addEventListener(\"click\", (e) => {\r\n    const select1 = new CustomSelect(\"#select-1\");\r\n    const mobileBtn = document.querySelector(\".mobile__btn\");\r\n    const sidebar = document.querySelector(\".sidebar\");\r\n    if (!e.target.closest(\".select\")) {\r\n        document.querySelectorAll(SELECTOR_ACTIVE).forEach((select) => {\r\n            select.classList.remove(CLASS_NAME_ACTIVE);\r\n        });\r\n    }\r\n    if (e.target === mobileBtn) {\r\n        sidebar.classList.toggle(\"sidebar_mobile\");\r\n        mobileBtn.classList.toggle(\"mobile__btn_active\");\r\n    }\r\n});\r\n// npm install webp-converter@2.2.3 --save-dev\r\n\n\n//# sourceURL=webpack://gulp2022/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;